# src/main.py
"""
main.py
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π CLI-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä: –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç ‚Äî –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω YOLO-11
(–æ—Ç ¬´—Å—ã—Ä—ã—Ö¬ª –¥–∞–Ω–Ω—ã—Ö –¥–æ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞).

–ü—Ä–∏–º–µ—Ä—ã:
    # –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    python -m src.main all --video /path/to/video.mp4

    # –æ–±—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
    python -m src.main train --size s --epochs 50

    # –∏–Ω—Ñ–µ—Ä–µ–Ω—Å ¬´–ø–æ-–∫–æ—Ä–æ—Ç–∫–æ–º—É¬ª (–≤–æ–∑—å–º—ë—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ video.* –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π best.pt)
    python -m src.main infer
"""

from __future__ import annotations

import argparse
import shutil
import sys
from pathlib import Path
from typing import List, Optional

from src.config import CFG
from src.utils.logger import get_logger

# ‚îÄ‚îÄ‚îÄ –µ–¥–∏–Ω–∏—á–Ω—ã–µ —ç—Ç–∞–ø—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
from src.data.extract_frames import extract
from src.data.augment import run as augment_run
from src.data.split_dataset import run as split_run
from src.models.train import main as train_main
from src.models.evaluate import main as eval_main
from src.models.infer_video import main as infer_video_main
from src.report.make_report import main as report_main

logger = get_logger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def _dispatch(func, argv: List[str] | None = None) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥—Å–∫—Ä–∏–ø—Ç *func* —Å –ø–æ–¥–º–µ–Ω—ë–Ω–Ω—ã–º argv (—á—Ç–æ–±—ã –µ–≥–æ argparse –æ—Ç—Ä–∞–±–æ—Ç–∞–ª)."""
    sys.argv = [func.__module__.split(".")[-1]] + (argv or [])
    func()


def _most_recent(patterns: list[str]) -> Optional[Path]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π ¬´—Å–≤–µ–∂–∏–π¬ª —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ glob-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–∏–ª–∏ None)."""
    hits: list[Path] = []
    for pat in patterns:
        hits.extend(Path(CFG.paths.root).glob(pat))
    if not hits:
        return None
    return max(hits, key=lambda p: p.stat().st_mtime)


def _default_video() -> Path:
    vid = _most_recent(
        [
            str(CFG.paths.data_raw / "*.mp4"),
            str(CFG.paths.data_raw / "*.mov"),
            str(CFG.paths.data_raw / "*.MOV"),
        ]
    )
    if not vid:
        raise FileNotFoundError("–í –ø–∞–ø–∫–µ data/raw –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ (*.mp4/ *.MOV)")
    return vid


def _default_weights() -> Path:
    w = _most_recent([str(CFG.paths.runs / "**/best.pt")])
    if not w:
        raise FileNotFoundError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ best.pt –≤ –ø–∞–ø–∫–µ runs/")
    return w


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CLI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(description="YOLO-11 dish-detection pipeline")
    sub = p.add_subparsers(dest="cmd", required=True)

    # –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    all_cmd = sub.add_parser("all", help="–ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω")
    all_cmd.add_argument("--video", type=Path, required=True, help="–∏—Å—Ö–æ–¥–Ω—ã–π —Ä–æ–ª–∏–∫ *.mp4/ *.MOV")

    # –æ–±—É—á–µ–Ω–∏–µ
    tr = sub.add_parser("train", help="–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å (n/s/x)")
    tr.add_argument("--size", default=CFG.train.model_size, choices=("n", "s", "x"))
    tr.add_argument("--epochs", type=int, default=CFG.train.epochs)

    # –æ—Ü–µ–Ω–∫–∞
    ev = sub.add_parser("eval", help="–æ—Ü–µ–Ω–∏—Ç—å –≤–µ—Å–∞")
    ev.add_argument("--weights", type=Path, required=True)

    # –∏–Ω—Ñ–µ—Ä–µ–Ω—Å (–≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã -> –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã)
    inf = sub.add_parser("infer", help="–∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ")
    inf.add_argument("--video", type=Path, help="–≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á. ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ data/raw)")
    inf.add_argument("--weights", type=Path, help="–≤–µ—Å–∞ (–ø–æ —É–º–æ–ª—á. ‚Äî —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π best.pt)")
    inf.add_argument("--out", type=Path, help="—Ñ–∞–π–ª –≤—ã–≤–æ–¥–∞ (.mp4). "
                     "–ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî results/<video>_boxes.mp4")
    inf.add_argument("--img", type=int, default=640)
    inf.add_argument("--conf", type=float, default=0.25)
    inf.add_argument("--batch", type=int, default=16)

    # –æ—Ç—á—ë—Ç
    sub.add_parser("report", help="—Å–æ–±—Ä–∞—Ç—å Markdown-–æ—Ç—á—ë—Ç")

    return p


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –±–æ–ª—å—à–æ–π —Ü–∏–∫–ª all ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def _run_all(video: Path) -> None:
    dst = CFG.paths.data_raw / "video.mp4"
    dst.parent.mkdir(parents=True, exist_ok=True)
    shutil.copy(video, dst)
    logger.info(f"üé• –í–∏–¥–µ–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ‚Üí {dst}")

    extract(dst, CFG.paths.frames, CFG.extract.fps)
    augment_run()
    split_run()

    for sz in ("n", "s", "x"):
        _dispatch(train_main, ["--size", sz, "--epochs", str(CFG.train.epochs)])

    for best in CFG.paths.runs.rglob("best.pt"):
        _dispatch(eval_main, ["--weights", str(best)])

    report_main()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entrypoint ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def main() -> None:
    args = _build_parser().parse_args()

    if args.cmd == "all":
        _run_all(args.video)

    elif args.cmd == "train":
        _dispatch(train_main, ["--size", args.size, "--epochs", str(args.epochs)])

    elif args.cmd == "eval":
        _dispatch(eval_main, ["--weights", str(args.weights)])

    elif args.cmd == "infer":
        # ‚Äî‚Äî‚Äî 1. –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî #
        video: Path = args.video or _default_video()
        weights: Path = args.weights or _default_weights()
        out: Path = args.out or Path(f"results/{video.stem}_boxes.mp4")

        logger.info("‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞:"
                    f"\n   video   = {video}"
                    f"\n   weights = {weights}"
                    f"\n   out     = {out}"
                    f"\n   img     = {args.img}"
                    f"\n   conf    = {args.conf}"
                    f"\n   batch   = {args.batch}")

        out.parent.mkdir(parents=True, exist_ok=True)

        _dispatch(
            infer_video_main,
            [
                "--video", str(video),
                "--weights", str(weights),
                "--out", str(out),
                "--img", str(args.img),
                "--conf", str(args.conf),
                "--batch", str(args.batch),
            ],
        )

    elif args.cmd == "report":
        report_main()


if __name__ == "__main__":
    main()
